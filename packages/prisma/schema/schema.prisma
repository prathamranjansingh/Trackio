generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  username             String?   @unique
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  isMachine            Boolean   @default(false)
  passwordHash         String?
  invalidLoginAttempts Int       @default(0)
  lockedAt             DateTime?
  createdAt            DateTime  @default(now())
  subscribed           Boolean   @default(true) // Consider if needed
  source               String? // Consider if needed

  // Relational data - Keep these
  codingProfiles   CodingProfile[]   @relation("UserCodingProfiles")
  accounts         Account[]
  sessions         Session[]
  Token            Token[]
  extensionApiKeys ExtensionApiKey[] @relation("UserExtensionApiKeys")

  // --- NEW RELATIONSHIPS TO SUMMARY TABLES ---
  dailyProjectSummaries DailyProjectSummary[] @relation("UserDailyProjectSummaries")
  dailyActivityTotals   DailyActivityTotal[]  @relation("UserDailyActivityTotals")

  @@index([source]) // Consider if needed
}

// ---------------------------------
// --- NEW SUMMARY MODELS START HERE ---
// ---------------------------------

// Stores aggregated data per project/language/category for a specific day.
// Used for showing detailed graphs (Today, 7 days, 30 days).
// Data older than your retention period (e.g., 7-35 days) can be deleted from here.
model DailyProjectSummary {
  id               String   @id @default(cuid())
  userId           String
  project_name     String
  language         String? // Nullable if language isn't relevant/detected
  category         String // "coding" or "debugging"
  date             DateTime @db.Date // Store only the date part
  duration_seconds Int      @default(0)

  user User @relation("UserDailyProjectSummaries", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, project_name, language, category])
  @@index([userId, date])
}

model DailyActivityTotal {
  userId                  String
  date                    DateTime @db.Date // Store only the date part
  total_coding_seconds    Int      @default(0)
  total_debugging_seconds Int      @default(0)

  user User @relation("UserDailyActivityTotals", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, date]) // Use a composite primary key
  @@index([userId, date])
}

// CLI Codegen Models
model ExtensionApiKey {
  id         String    @id @default(cuid())
  name       String?
  hashedKey  String    @unique
  partialKey String // Store the first few chars for display purposes
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation("UserExtensionApiKeys", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CodingProfile {
  id          String   @id @default(cuid())
  userId      String
  provider    String // e.g., "leetcode", "github"
  username    String
  profileJson Json? // Store raw data fetched from the provider API
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation("UserCodingProfiles", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, username])
  @@unique([provider, userId]) // A user should only have one profile per provider
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  id         String    @id @default(cuid())
  name       String?
  hashedKey  String    @unique
  partialKey String
  expires    DateTime?
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
