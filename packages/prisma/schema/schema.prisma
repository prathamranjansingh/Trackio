generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  isMachine            Boolean   @default(false)
  passwordHash         String?
  invalidLoginAttempts Int       @default(0)
  lockedAt             DateTime?
  createdAt            DateTime  @default(now())
  subscribed           Boolean   @default(true)
  source               String?

  // relational data
  codingProfiles   CodingProfile[]   @relation("UserCodingProfiles")
  accounts         Account[]
  sessions         Session[]
  Token            Token[]
  extensionApiKeys ExtensionApiKey[] @relation("UserExtensionApiKeys")

  // --- NEW RELATIONSHIPS ADDED HERE ---
  projects       Project[]      @relation("UserProjects")
  heartbeats     Heartbeat[]    @relation("UserHeartbeats")
  dailySummaries DailySummary[] @relation("UserDailySummaries")

  @@index(source)
}

// ---------------------------------
// --- NEW MODELS START HERE ---
// ---------------------------------

// MODEL 1: Raw event log. This table stores every coding event and can grow very large.
model Heartbeat {
  id        String   @id @default(cuid())
  entity    String // The file path, e.g., "/Users/jane/dev/api/src/index.ts"
  language  String?
  time      DateTime // The exact timestamp of the coding activity
  isWrite   Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User   @relation("UserHeartbeats", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  project   Project? @relation("ProjectHeartbeats", fields: [projectId], references: [id], onDelete: SetNull)
  projectId String?

  @@index([userId, time]) // ESSENTIAL index for fast queries by user and time
}

// MODEL 2: A dedicated table for projects. This is modular and scalable.
model Project {
  id            String   @id @default(cuid())
  name          String // The project name from the editor, e.g., "Trackio"
  repositoryUrl String?
  createdAt     DateTime @default(now())

  user   User   @relation("UserProjects", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  heartbeats     Heartbeat[]    @relation("ProjectHeartbeats")
  dailySummaries DailySummary[] @relation("ProjectDailySummaries")

  @@unique([userId, name]) // A user cannot have two projects with the same name
}

// MODEL 3: The key to frontend performance. This table stores pre-calculated summaries.
model DailySummary {
  id           String   @id @default(cuid())
  date         DateTime @db.Date // Stores only the date, e.g., 2025-10-15
  totalSeconds Int // Total seconds coded for this specific combination

  user   User   @relation("UserDailySummaries", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  project   Project? @relation("ProjectDailySummaries", fields: [projectId], references: [id], onDelete: SetNull)
  projectId String?

  language String

  // This unique constraint ensures data integrity.
  @@unique([userId, date, projectId, language])
  @@index([userId, date]) // ESSENTIAL index for fast timeline queries
}

// ---------------------------------
// --- NO CHANGES TO MODELS BELOW ---
// ---------------------------------

model ExtensionApiKey {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation("UserExtensionApiKeys", fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}

model CodingProfile {
  id          String   @id @default(cuid())
  userId      String
  provider    String
  username    String
  profileJson Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation("UserCodingProfiles", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, username])
  @@unique([provider, userId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  expires    DateTime?
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
