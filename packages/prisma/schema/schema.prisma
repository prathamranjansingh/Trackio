generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  isMachine            Boolean   @default(false)
  // password data
  passwordHash         String?
  invalidLoginAttempts Int       @default(0)
  lockedAt             DateTime?

  createdAt      DateTime        @default(now())
  subscribed     Boolean         @default(true) // email subscription
  source         String? // where the user came from
  // relational data
  codingProfiles CodingProfile[]

  accounts         Account[]
  sessions         Session[]
  Token            Token[]
  extensionApiKeys ExtensionApiKey[] @relation("UserExtensionApiKeys")

  @@index(source)
}

model ExtensionApiKey {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation("UserExtensionApiKeys", fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}

model CodingProfile {
  id          String   @id @default(cuid())
  userId      String
  provider    String // "leetcode", "codeforces", "gfg", "codechef", ...
  username    String // handle on provider
  profileJson Json? // snapshot of provider profile
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, username]) // a provider username can be claimed by only one user
  @@unique([provider, userId]) // a user can have at most one account per provider
  @@index([userId])
}

model EmailVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  expires    DateTime?
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
